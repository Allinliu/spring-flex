<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema
	xmlns="http://www.springframework.org/schema/flex"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:beans="http://www.springframework.org/schema/beans"
	targetNamespace="http://www.springframework.org/schema/flex"
	elementFormDefault="qualified" attributeFormDefault="unqualified"
	version="1.0">
	
	<xsd:annotation>
		<xsd:documentation>
			<![CDATA[
Spring BlazeDS Integration Configuration Schema
Authors: Jeremy Grelle
<br>
A XML-based DSL for configuring Spring BlazeDS Integration.
]]>
		</xsd:documentation>
	</xsd:annotation>
	
	<xsd:import namespace="http://www.springframework.org/schema/beans" schemaLocation="http://www.springframework.org/schema/beans/spring-beans-2.5.xsd" />
	
	<xsd:element name="message-broker">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
Configures and bootstraps the BlazeDS MessageBroker as a Spring-managed bean.  The MessageBroker is the central
hub of communication between the Flex front-end and Java back-end services.  The MessageBroker will be configured
with a set of sensible default settings, and the necessary supporting infrastructure for routing messages through
the Spring DispatcherServlet will be automatically installed.  Note that setting a custom id for the MessageBroker 
is not required unless you are configuring multiple MessageBrokers in one ApplicationContext (this would be 
considered rare).
]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:sequence minOccurs="0" maxOccurs="1">
						<xsd:choice minOccurs="0" maxOccurs="unbounded">
							<xsd:element name="mapping" type="mappingType">
								<xsd:annotation>
									<xsd:documentation>
										<![CDATA[
Provides a custom handler mapping path for routing requests to the Spring-managed MessageBroker.  By default, a 
single '/*' mapping is installed.  Specifying one or more mapping elements will override this default mapping.  
]]>
									</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element name="config-processor" type="configProcessorType">
								<xsd:annotation>
									<xsd:documentation>
										<![CDATA[
Installs a custom instance of org.springframework.flex.messaging.config.MessageBrokerConfigProcessor for 
programmatically modifying the configuration of the MessageBroker.
]]>
									</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element name="exception-translator" type="exceptionTranslatorType">
								<xsd:annotation>
									<xsd:documentation>
										<![CDATA[
Installs a bean instance of org.springframework.flex.messaging.ExceptionTranslator for 
applying custom translation from known exception types to a BlazeDS MessageException.
]]>
									</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
						<xsd:element name="remoting-service" minOccurs="0" maxOccurs="1" type="remotingServiceType">
							<xsd:annotation>
								<xsd:documentation>
									<![CDATA[
Supports custom configuration of the default RemotingService.  Note that this will only take effect if no 
RemotingService configuration has been specified in the BlazeDS XML configuration files.
]]>
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="secured" minOccurs="0" maxOccurs="1" type="securedType">
							<xsd:annotation>
								<xsd:documentation>
									<![CDATA[
Installs and configures Spring Security integration.  Spring Security must be properly configured in the current
ApplicationContext in order for this integration to function correctly.  
]]>
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
					<xsd:attribute name="services-config-path" type="xsd:string" default="/WEB-INF/flex/services-config.xml">
						<xsd:annotation>
							<xsd:documentation>
								<![CDATA[
Sets a custom location for the BlazeDS XML configuration file (usually named services-config.xml) used in loading and 
configuring the MessageBroker.  The file will be loaded using a Spring ResourceLoader, so typical Spring conventions
such as "classpath:" style paths may be used.  The default location is "/WEB-INF/flex/services-config.xml".  Note
that this attribute cannot be used in conjunction with the 'configuration-manager' attribute.       								
]]>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="configuration-manager" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								<![CDATA[
Sets a reference to a custom flex.messaging.config.ConfigurationManager bean.  The default provided implementation is
org.springframework.flex.messaging.config.FlexConfigurationManager, which uses Spring's ResourceLoader for resolving
BlazeDS configuration files.  The most common reason for providing a custom bean instance of this class would be
to specify an implemention of flex.messaging.config.ConfigurationParser other than the default Apache XPath based 
implementation.  								
]]>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="disable-default-mapping" type="xsd:boolean" default="false">
						<xsd:annotation>
							<xsd:documentation>
								<![CDATA[
Prevents the default handler mapping class from being installed.  Set this to true only if you are providing your
own HandlerMapping bean instance for routing requests to the Spring-managed MessageBroker.  The more common approach
will be to use child <mapping> elements to provide custom paths to the default SimpleUrlHandlerMapping.   								
]]>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="remote-service">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
Exports a Spring bean as a destination for Flex AMF-based remoting.  May be used as either a top-level tag with a 
reference to the bean to be exported, or as child tag of the bean to be exported. 
]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="ref" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[
A reference to the bean to be exported for remoting.  Required when used as a top-level tag.								
]]>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="message-broker" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[
The id of the Spring-managed MessageBroker that will route messages to the exported bean.  Not required unless an
explicit id has been specified for the MessageBroker.							
]]>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="service-id" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[
The id of the remoting destination.  This corresponds to the "destination" property that will be set on the 
RemoteObject in the Flex client.  By default, this will be set to the name of the bean being exported.  								
]]>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="channels" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[
A comma-separated list of ids for the BlazeDS channels over which this remoting destination should be exposed.  Only
needed when overriding the default channels for the RemotingService.								
]]>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="include-methods" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[
A comma-separated list of names of the methods that will be included for remote invocation.  Optional.  								
]]>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="exclude-methods" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[
A comma-separated list of names of the methods that will be excluded from remote invocation.  Optional.								
]]>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="mappingType">
		<xsd:attribute name="pattern" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
Ant-style pattern for request paths that should be routed to the MessageBroker.								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="configProcessorType">
		<xsd:attribute name="ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
A reference to a custom bean instance of org.springframework.flex.messaging.config.MessageBrokerConfigProcessor.								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="exceptionTranslatorType">
		<xsd:attribute name="ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
A reference to a custom bean instance of org.springframework.flex.messaging.ExceptionTranslator.								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="securedType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="secured-channel" type="securedChannelType">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[
Secures a BlazeDS communication channel that is referenced by id.								
]]>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="secured-endpoint-path" type="securedEndpointPathType">
				<xsd:annotation>
					<xsd:documentation>
						<![CDATA[
Secures BlazeDS communication channels that have an endpoint URL matching a specified path pattern.								
]]>
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:choice>
		<xsd:attribute name="authentication-manager" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
A bean reference to the Spring Security AuthenticationManager.  Only required when a custom id has been provided for
the AuthenticationManager. 								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="access-decision-manager" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
A bean reference to the Spring Security AccessDecisionManager.  Only required when a custom id has been provided for
the AccessDecisionManager. 								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="per-client-authentication" type="xsd:boolean" default="false">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
Configures per-client authentication in BlazeDS.  Note that per-client authentication is not expected to work
properly in the current M2 release of Spring BlazeDS integration, but special support will be provided for it
in the future. 								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="invalidate-flex-session" type="xsd:boolean" default="true">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
Used to specify whether the current flex session should be invalidated when logging out using ChannelSet.logout from
the Flex client.  Defaults to 'true'.								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="securedChannelType">
		<xsd:attribute name="channel" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
The id of the BlazeDS communication channel to be secured.								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="access" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
The access configuration attributes that apply for the specified channel.								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="securedEndpointPathType">
		<xsd:attribute name="pattern" type="xsd:string" use="optional" default="**/messagebroker/*">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
Ant-style pattern for matching endpoint URLs.  Default is "**/messagebroker/*".								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="access" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
The access configuration attributes that apply for any matching channel endpoint.							
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="remotingServiceType">
		<xsd:attribute name="default-adapter-id" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
Sets a custom id for the default adapter of the RemotingService. 								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="default-adapter-class" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
Sets a custom class for the default adapter of the RemotingService.								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="default-channels" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					<![CDATA[
A comma-separated list of the default channels for the RemotingService.  If not specified, and if no 
application-wide default channels are found, the first available AMF channel will be used.								
]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
</xsd:schema>