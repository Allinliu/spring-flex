<?xml version="1.0" encoding="UTF-8"?>
<chapter id="configuration">
    <title>Configuring the BlazeDS MessageBroker with Spring</title>
    <sect1 id="configuration-introduction">
        <title>Introduction</title>
        <para>
        	The central component that must be configured to use Spring BlazeDS Integration is the <code>MessageBroker</code>.  HTTP messages from the Flex client
        	will be routed through the Spring <code>DispatcherServlet</code> to the Spring-managed <code>MessageBroker</code>.  There is no need to configure the 
        	BlazeDS <code>MessageBrokerServlet</code> when using the Spring-managed <code>MessageBroker</code>.
        </para>
    </sect1>
    <sect1 id="configuration-dispatcherservlet">
    	<title>Configuring the Spring DispatcherServlet</title>
    	<para>
    		The <code>DispatcherServlet</code> must be configured as normal in web.xml to bootstrap a Spring WebApplicationContext. For example:
    	</para>
    	<programlisting language="xml"><![CDATA[
<!-- The front controller of this Spring Web application, responsible for handling all application requests -->
<servlet>
    <servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/config/web-application-config.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
</servlet>]]>
		</programlisting>
    </sect1>
    <sect1 id="configuration-messagebroker">
    	<title>Configuring the MessageBroker in Spring</title>
    	<para>
    		A simplified Spring XML config namespace is provided for configuring the MessageBroker in your WebApplicationContext. To use the 
    		namespace support you must add the schema location in your Spring XML config files.  A typical config will look something like
    		the following:
    	</para>
    	<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:flex="http://www.springframework.org/schema/flex"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/flex 
           http://www.springframework.org/schema/flex/spring-flex-1.0.xsd">
...
</beans>
]]>    		
    	</programlisting>
    	<para>
    		This makes the Spring BlazeDS Integration configuration tags available under the <code>flex</code> namespace in your configuration files.  The above setup will
    		be assumed for the rest of the configuration examples to follow.  For the full detail of every attribute and tag available in the config namespace, be sure
    		to refer to the spring-flex-1.0.xsd as every element and attribute is fully documented there.  Using an XSD-aware XML editor such as the one in Eclipse
    		should bring up the documentation automatically as you type.  (Note that until the final xsd is published to the above web address, you would need to manually
    		add the XSD to your XML catalog in Eclipse for auto-completion to work correctly.)
    	</para>
    	<para>
    		At a minimum, the <code>MessageBrokerFactoryBean</code> must be configured as a bean in your Spring WebApplicationContext in order to bootstrap the <code>MessageBroker</code>,
    		along with a <code>MessageBrokerHandlerAdapter</code> and an appropriate <code>HandlerMapping</code> (usually a <code>SimpleUrlHandlerMapping</code>) to route incoming
    		requests to the Spring-managed <code>MessageBroker</code>.
    	</para>
    	<para> 
    		These beans will be registered automatically by using the provided <code>message-broker</code> tag in your bean
    		definition file.  For example, in its simplest form:
    	</para>
    	<programlisting language="xml"><![CDATA[
<flex:message-broker/>]]>    	
    	</programlisting>
    	<para>
    		This will set up the <code>MessageBroker</code> and necessary supporting infrastructure using sensible defaults.  The defaults can be
    		overriden using the provided attributes of the <code>message-broker</code> tag and its associated child elements.  For example, the
    		default location of the BlazeDS XML configuration file (/WEB-INF/flex/services-config.xml) can be overridden using the 
    		<code>services-config-path</code> attribute.  The <code>MessageBrokerFactoryBean</code> uses Spring's <code>ResourceLoader</code> abstraction,
    		so that typical Spring resource paths may be used.  For example, to load the configuration from the application's classpath: 
    	</para>
    	<programlisting language="xml"><![CDATA[
<flex:message-broker services-config-path="classpath*:services-config.xml"]]>    	
    	</programlisting>
    	<para>
    		The equivalent <code>MessageBrokerFactoryBean</code> definition using vanilla Spring configuration would be:
    	</para>
    	<programlisting language="xml"><![CDATA[
<!-- Bootstraps and exposes the BlazeDS MessageBroker -->
<bean id="_messageBroker" class="org.springframework.flex.messaging.MessageBrokerFactoryBean" >
	<property name="servicesConfigPath" value="classpath*:services-config.xml" />
</bean>]]>    	
    	</programlisting>
    	<para>
    		Note especially that with the <code>message-broker</code> tag, it is not necessary to assign a custom id to the MessageBroker, and it
    		is in fact discouraged so that you won't have to continually reference it later.  The only reason you would ever need to provide a custom
    		id is if you were bootstrapping more than one <code>MessageBroker</code> in the same WebApplicationContext.
    	</para>
    </sect1>
    <sect1 id="configuration-mapping">
    	<title>Mapping Requests to the MessageBroker</title>
    	<para>To properly route incoming requests to the Spring-managed <code>MessageBroker</code>, request mapping must be configured in three places:</para>
    	<orderedlist>
    		<listitem><para><code>DispatcherServlet</code> mapping in web.xml</para></listitem>
    		<listitem><para><code>HandlerMapping</code> in the Spring WebApplicationContext</para></listitem>
    		<listitem><para>Channel definitions in the BlazeDS services-config.xml</para></listitem>
    	</orderedlist>
    	<para>
    		The simplest request mapping scenario is when the Flex front-end is the only client type for the application.  In this case you can just map /messagebroker as the top-level
    		path for requests.  The mapping in web.xml would be:
    	</para>
    	<programlisting language="xml"><![CDATA[
<!-- Map all /messagbroker requests to the DispatcherServlet for handling -->
<servlet-mapping>
    <servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
    <url-pattern>/messagebroker/*</url-pattern>
</servlet-mapping>]]>    
		</programlisting>
		<para> 
    		When using the <code>message-broker</code> config tag, a <code>SimpleUrlHandlerMapping</code> is installed that by default maps all 
    		incoming <code>DispatcherServlet</code> requests to the Spring-manager <code>MessageBroker</code> using a <code>/*</code>path pattern.  
    		The default mapping can be overridden by providing one or more <code>mapping</code> child elements.  If you want to provide your own
    		<code>HandlerMapping</code> bean configuration, you can disable the default using the <code>disable-default-mapping</code> attribute 
    		of the <code>message-broker</code> tag.
    	</para>
		<para>
			Then the <code>SimpleUrlHandlerMapping</code> in the Spring WebApplicationContext maps all requests to the Spring-managed <code>MessageBroker</code> via 
			the <code>MessageBrokerHandlerAdapter</code>.  The default setup installed by the <code>message-broker</code> config tag is equivalent to the
			following bean definitions:
		</para>
		<programlisting language="xml"><![CDATA[
<!-- Maps request paths at /* to the BlazeDS MessageBroker -->
<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
        <value>
            /*=_messageBroker
        </value>
    </property>
</bean>

<!-- Dispatches requests mapped to a MessageBroker -->
<bean class="org.springframework.flex.messaging.servlet.MessageBrokerHandlerAdapter"/>]]>    
		</programlisting>
		<para>
			Channel definitions in the BlazeDS services-config.xml must correspond to the chosen mapping.  For example, to set up a typical AMF channel in 
			BlazeDS that matches the above mapping strategy:
		</para>
		<programlisting language="xml"><![CDATA[
<channel-definition id="my-amf" class="mx.messaging.channels.AMFChannel">
    <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/amf" class="flex.messaging.endpoints.AMFEndpoint"/>
    <properties>
        <polling-enabled>false</polling-enabled>
    </properties>
</channel-definition>]]> 		
		</programlisting>
		<para>
			See the <ulink url="http://livedocs.adobe.com/blazeds/1/blazeds_devguide/">BlazeDS documentation</ulink> for more information on configuring communication 
			channels in services-config.xml.
		</para>
		<para>
			It could often be the case that your application needs to serve more than just Flex-based clients.  For example, you may be constructing a RESTful architecture
			that is meant to serve multiple client-types.  You could potentially even be consuming RESTful endpoints using the Flex HTTPService component.  In this case, 
			you will want to choose a more flexible mapping strategy, such as mapping <code>/spring/*</code> to the <code>DispatcherServlet</code>, mapping <code>/messagebroker/*</code>
			to the Spring-managed <code>MessageBroker</code>, and modifying any BlazeDS channel definitions accordingly.  You would override the default mapping strategy
			of the <code>message-broker</code> tag as follows:
		</para>
		<programlisting language="xml"><![CDATA[
<flex:message-broker>
	<flex:mapping pattern="/messagebroker/*" />
</flex:message-broker>]]> 		
		</programlisting>
		<para>
			and you would have to account for the /spring/* mapping in your BlazeDS channel definitions.  For example:
		</para>
		<programlisting language="xml"><![CDATA[
<channel-definition id="my-amf" class="mx.messaging.channels.AMFChannel">
    <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/amf" class="flex.messaging.endpoints.AMFEndpoint"/>
    <properties>
        <polling-enabled>false</polling-enabled>
    </properties>
</channel-definition>]]> 		
		</programlisting>
    </sect1>
    <sect1 id="config-processors">
    	<title>Advanced MessageBroker Customization</title>
    	<para>
    		The initialization of the <code>MessageBroker</code> by the <code>MessageBrokerFactoryBean</code> logically consists of two phases:
    	</para>
    	<orderedlist>
    		<listitem>
    			<para>Parsing the BlazeDS XML configuration files and applying their settings to a newly created MessageBroker</para>
    		</listitem>
    		<listitem>
    			<para>Starting the MessageBroker and its services</para>
    		</listitem>
    	</orderedlist>
    	<para>
    		A special <code>MessageBrokerConfigProcessor</code> callback interface is provided that allows custom processing to be done on the
    		newly created MessageBroker after each phase, before it is made available for request processing.  This interface is used internally
    		by Spring BlazeDS Integration, but is also available for general use in advanced programmatic introspection and customization of the 
    		<code>MessageBroker</code>.  A custom <code>MessageBrokerConfigProcessor</code> can be configured as a Spring bean and then registered with the 
    		<code>MessageBrokerFactoryBean</code> via the <code>config-processor</code> tag.  For example, given a trivial implementation
    		to log some additional info about the MessageBroker:   		
    	</para>
    	<programlisting language="java"><![CDATA[
package com.example;

import org.springframework.flex.messaging.config.MessageBrokerConfigProcessor;

import flex.messaging.MessageBroker;
import flex.messaging.services.RemotingService;

public class MyDestinationCountingConfigProcessor implements MessageBrokerConfigProcessor {

	public MessageBroker processAfterStartup(MessageBroker broker) {
		RemotingService remotingService = 
			(RemotingService) broker.getServiceByType(RemotingService.class.getName());
		if (remotingService.isStarted()) {
			System.out.println("The Remoting Service has been started with "
					+remotingService.getDestinations().size()+" Destinations.");
		}
		return broker;
	}

	public MessageBroker processBeforeStartup(MessageBroker broker) {
		return broker;
	}
}]]> 		
		</programlisting>
		<para>
			This class could be configured and registered with the <code>MessageBroker</code> as follows:
		</para>
		<programlisting language="xml"><![CDATA[
<flex:message-broker>
	<flex:config-processor ref="myConfigProcessor" />
</flex:message-broker>

<bean id="myConfigProcessor" class="com.example.MyDestinationCountingConfigProcessor" />]]>
		</programlisting>
    </sect1>

</chapter>